// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var PLUGIN_NAME, Stream, VinylFile, chalk, deferred, fs, gm, path, pixelFill, resize, through, _;

  PLUGIN_NAME = 'gulp-retina-sprites';

  Stream = require('stream').Stream;

  path = require('path');

  fs = require('fs');

  _ = require('lodash');

  through = require('through2');

  gm = require('gm');

  VinylFile = require('vinyl');

  deferred = require('deferred');

  chalk = require('chalk');

  module.exports = function(options) {
    if (options == null) {
      options = {};
    }
    return through.obj(function(file, enc, next) {
      var basePath, filePath, folder, gmFile, relative1xPath, relative2xPath;
      basePath = file.base;
      folder = basePath.match(/([^\//]+)\/$/)[1];
      filePath = file.path;
      relative2xPath = path.join("" + folder + "-2x", file.relative);
      relative1xPath = path.join("" + folder + "-1x", file.relative);
      if (!file.relative.match(/\.png/ig)) {
        next(null, file);
      }
      return gmFile = gm(filePath).background('#ffffffff').size((function(_this) {
        return function(err, size) {
          var file1x, file2x, promise, rootDef;
          rootDef = deferred();
          promise = rootDef.promise();
          file2x = null;
          file1x = null;
          promise.then(function() {
            var def;
            def = deferred();
            pixelFill(gmFile, size.width, size.height);
            gmFile.toBuffer(null, function(err, buffer) {
              file2x = new VinylFile({
                base: basePath,
                path: path.join(basePath, relative2xPath),
                contents: buffer
              });
              return def.resolve();
            });
            return def.promise();
          }).then(function() {
            var def;
            def = deferred();
            resize(gmFile, size.width, size.height);
            gmFile.toBuffer(null, function(err, buffer) {
              file1x = new VinylFile({
                base: basePath,
                path: path.join(basePath, relative1xPath),
                contents: buffer
              });
              return def.resolve();
            });
            return def.promise();
          }).then(function() {
            _this.push(file2x);
            _this.push(file1x);
            return next();
          });
          rootDef.resolve();
          return null;
        };
      })(this));
    });
  };

  pixelFill = function(file, width, height) {
    if (height % 2) {
      return file.extent(width, ++height);
    } else {
      return file;
    }
  };

  resize = function(file, width, height) {
    width *= 0.5;
    height *= 0.5;
    return file.resize(width, height);
  };

}).call(this);
